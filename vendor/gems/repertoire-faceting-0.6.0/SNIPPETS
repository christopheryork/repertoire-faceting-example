======= potentially of use later:

-- Utility function to expand nesting in facet indices
--
--  Initially a acet index will include only leaves of 
--  nesting tree.  This function adds all interior nodes
--  with their respective aggregate signatures, and adds a
--  postgresql index to the nested facet value.
--
-- e.g. given the facet values
--   '{USA,Florida}'  '10'
--   '{USA,Iowa}'     '01'
--
-- the function inserts
--   '{USA}'          '11'
--
-- N.B. expand_nesting may only be called once on a table
--      it refuses to add internal node duplicates
--
CREATE OR REPLACE FUNCTION expand_nesting(tbl TEXT, col TEXT) RETURNS VOID AS $$
DECLARE
  len INTEGER;
BEGIN
  -- add unique index on facet value column
  EXECUTE 'CREATE UNIQUE INDEX ' || tbl || '_' || col || '_ndx  ON ' || quote_ident(tbl) || '(' || quote_ident(col) || ')';
  -- compute maximum nesting length for facet values
  EXECUTE 'SELECT max(array_length(' || quote_ident(col) || ', 1)) FROM ' || quote_ident(tbl)
    INTO len;
  -- expand each level
  FOR i IN REVERSE (len-1)..1 LOOP
    EXECUTE 'INSERT INTO ' || quote_ident(tbl) || '(' || quote_ident(col) || ', signature)'
	  || ' SELECT ' || quote_ident(col) || '[1:' || i || '], collect(signature)'
	  || ' FROM ' || quote_ident(tbl)
	  || ' WHERE array_length(' || quote_ident(col) || ', 1) > ' || i
	  || ' GROUP BY ' || quote_ident(col) || '[1:' || i || ']';
  END LOOP;
END;
$$ LANGUAGE plpgsql;

PG_FUNCTION_INFO_V1( sig_or );

Datum
sig_or( PG_FUNCTION_ARGS )
{
	Signature *sig1,  
	          *sig2,
		        *res;
	int32 sig1bytes, 
	      sig2bytes,
		    resbytes,
				i;
	uint8 c;
	
	sig1 = PG_GETARG_SIGNATURE_P(0);
	sig1bytes = VARSIZE(sig1) - VARHDRSZ - SIGNATUREHDRSZ;
	
	sig2 = PG_GETARG_SIGNATURE_P(1);
	sig2bytes = VARSIZE(sig2) - VARHDRSZ - SIGNATUREHDRSZ;
	
	resbytes = MAX(sig1bytes, sig2bytes);
	
	// if aggregate accumulator, don't allocate new memory
	if (fcinfo->context && IsA(fcinfo->context, AggState) && resbytes == sig1bytes) {
		res = sig1;
	} else {
		res = (Signature *) palloc0( resbytes + VARHDRSZ + SIGNATUREHDRSZ );
		SET_VARSIZE(res, resbytes + VARHDRSZ + SIGNATUREHDRSZ );
	}
	res->len = MAX(sig1->len, sig2->len);
	
	for(i=0; i<resbytes; i++) {
		c = 0;
		if (i < sig1bytes) {
			c |= sig1->data[i];
		}
		if (i < sig2bytes) {
			c |= sig2->data[i];
		}
		res->data[i] = c;
	}
	
	PG_FREE_IF_COPY(sig1, 0);
	PG_FREE_IF_COPY(sig2, 1);
	
	PG_RETURN_SIGNATURE_P( res );
}


-- sql to see if packed_id argument was provided and add clause

  sql = 'UPDATE ' || facet_table_name(context, facet.name)

  IF (NOT like(sql, '%WHERE%')) THEN
    sql = sql || ' WHERE _packed_id = ' || quote_literal(packed_id);
  ELSE  
    sql = sql || ' AND _packed_id = ' || quote_literal(packed_id);
  END IF;
END IF;




-- Facet declarations table

CREATE TABLE _facets(
  context TEXT NOT NULL,
  name TEXT NOT NULL,
  select_expr TEXT CHECK (select_expr IS NULL OR select_expr LIKE 'SELECT % FROM %'),
  PRIMARY KEY (context, name)
);

-- Utility functions for naming facet index tables and sequences

CREATE OR REPLACE FUNCTION facet_table_name(context TEXT, name TEXT) RETURNS TEXT AS $$
BEGIN
  RETURN quote_ident('_' || context || '_' || name || '_facet');
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION facet_seq_name(context TEXT) RETURNS TEXT AS $$
BEGIN
  RETURN quote_ident('_' || context || '_packed_id_seq');
END;
$$ LANGUAGE plpgsql;

-- Declare that a table will be used as faceting context  [ provides for packed ids ]

CREATE OR REPLACE FUNCTION declare_context(context TEXT) RETURNS VOID AS $$
BEGIN
  EXECUTE 'CREATE SEQUENCE ' || facet_seq_name(context);
  EXECUTE 'ALTER TABLE ' || quote_ident(context) || ' ADD COLUMN _packed_id INT UNIQUE DEFAULT nextval( ''' || facet_seq_name(context) || ''' )';
END;
$$ LANGUAGE plpgsql;

-- Update all facet counts for the given context

CREATE OR REPLACE FUNCTION reindex_facets(context TEXT) RETURNS VOID AS $$
DECLARE
  select_expr TEXT;
BEGIN
  -- Pack index ids
  EXECUTE 'ALTER SEQUENCE ' || facet_seq_name(context) || ' RESTART WITH 1';
  EXECUTE 'UPDATE production SET _packed_id = nextval( ''' || facet_seq_name(context) || ''' )';
  -- Update facets for context table
  FOR facet IN SELECT * FROM _facets WHERE _facets.context = context LOOP
    select_expr = facet.select_expr;
    -- From expr defaults to context table and facet column
    IF (select_expr IS NULL) THEN
      select_expr = 'SELECT ' || facet.name || ' FROM ' || facet.context;
    END IF;
    -- Augment to collect signature
    select_expr = replace(select_expr, 'FROM', ', sig_collect(' || context || '._packed_id) AS signature FROM');
	  -- Remove old facet value table
	  EXECUTE 'DROP TABLE IF EXISTS ' || facet_table_name(context, facet.name);
	  -- Create facet value table, with signature of ids
	  EXECUTE 'CREATE TABLE ' || facet_table_name(context, facet.name) || ' AS ' || select_expr 
	                          || ' GROUP BY ' || facet.name;
  END LOOP;
END;
$$ LANGUAGE plpgsql;


-- extra functions for hash operator class (but for some reason postgres' hash_any fn core dumps.  params not right?
-- no big advantage, since will rarely be merging more than 10 signatures with UNION

--CREATE OR REPLACE FUNCTION sig_hash( signature )
--  RETURNS int4
--  AS 'signature.so', 'sig_hash'
--  LANGUAGE C STRICT IMMUTABLE;	

--CREATE OPERATOR CLASS signature_ops
--DEFAULT FOR TYPE signature USING hash AS
--    OPERATOR    1   = ,
--    FUNCTION    1   sig_hash(signature);


/*
PG_FUNCTION_INFO_V1(sig_hash);

Datum
sig_hash(PG_FUNCTION_ARGS)
{
	Signature *sig = (Signature *) PG_GETARG_POINTER(0);
	int32     sig_bytes,
            sig_bits;
  uint8     x;
	Datum		  result;
	
  sig_bytes = sig->len / 8;
  sig_bits  = sig->len % 8;
  
  // clear unused bits to ensure hash equality
  if (sig_bits > 0) {
  	x = 0xFF >> sig_bits;
  	sig->data[sig_bytes] &= ~x;
  }

	result = hash_any((unsigned char *) sig->data, sig_bytes + 1);

	// Avoid leaking memory for toasted inputs
	PG_FREE_IF_COPY(sig, 0);

	PG_RETURN_DATUM(result);
}






// end gis facet factory
return self;
}





  // if called before google earth ready, just return
  if (!ge)
    return;
  
  // determine how feature indices map onto quantiles
  var category_size = counts.length / options.quantiles.categories;
  console.log("category size: " + category_size);
  
  // create a placemark style for each quantile
  var styles = [];
  for (var i = 0; i < options.quantiles.categories; i += 1 ) {
    var fraction = i / options.quantiles.categories;
    
    var style    = gex.dom.buildStyle(options.style || {});
    var color    = gex.util.blendColors(options.quantiles.low, options.quantiles.high, fraction);
    //style.getPolyStyle().setColor(color);
    console.log("category " + i + ": " + fraction);
    
    styles[i] = style;
  }
  
  // create a map between feature ids and their choropleth styles
  var quantile      = {};
  $.each(counts, function(index, facet_value_count) {
    var value    = facet_value_count[0];
    var count    = facet_value_count[1];
    var category = Math.floor( index / category_size );
    quantile[value] = styles[category];
  })

  // walk the dom and update style on all matching placemarks
  gex.dom.walk({
    rootObject: ge,
    visitCallback: function() {
      console.log(this.getType());
      if ('getType' in this && this.getType() == 'KmlPlacemark') {
        var id    = this.getId();
        var style = quantile[id];
        
        console.log(id);
      
        //if (style) {
          console.log('setting ' + id);
          this.setStyleSelector(style);
          this.setVisibility(true);
        //} else {
        //  console.log('hiding ' + id);
        //  this.setVisibility(false);
        //}
      }
      
      return true;
    }
  });
  
  
  
   '<ExtendedData>' +
   '<Data name="label">' +
   '<value>' + label + '</value>' +
   '</Data>' +
   '</ExtendedData>' +



   --
   -- Aggregate for generating weighted sample data from tables
   --
   -- Usage:
   --
   --    Given a table of data and frequencies, generate an array of 45 
   --      statistically-representative values:
   --
   --    SELECT weighted_sample(surname, frequency, 45) FROM male_names;
   -- 
   --    If you only want one:
   --
   --    SELECT weighted_sample(surname, frequency) FROM male_names;
   --
   --    The frequency can be any series of numbers representing relative
   --    weights.  It is not necessary that they sum to 1.0.  The values them-
   --    selves are cast to TEXT.
   --
   --    You can turn the resulting values back into rows with unnest() and
   --    join them to other sample data.  See the Postgresql 8.4 documentation.
   --

   CREATE TYPE sample AS (vals TEXT[], freqs DOUBLE PRECISION[], sum DOUBLE PRECISION, size INTEGER);

   --
   -- Given X (a series of vals) and Y (a series of DOUBLE PRECISION values), return a random
   -- X/id that conforms to the weighted sample of all values Y within the total.
   --
   CREATE OR REPLACE FUNCTION sample_matrix(state sample) RETURNS TEXT[] AS $$
   DECLARE
     running_sum DOUBLE PRECISION;
     i           INTEGER;
     rand        DOUBLE PRECISION;
     samples     TEXT[];
   BEGIN
     FOR i IN 1..state.size LOOP
       -- select a random value and loop through until hitting the corresponding item
       rand        := random();
       running_sum := 0.0;
       i           := 0;
       WHILE rand >= running_sum LOOP
         i := i + 1;
         running_sum := running_sum + (state.freqs[i] / state.sum);
       END LOOP;
       samples := samples || state.vals[i];
     END LOOP;
     RETURN samples;
   END
   $$ LANGUAGE plpgsql;

   CREATE OR REPLACE FUNCTION sample_matrix_single(state sample) RETURNS TEXT AS $$
   BEGIN
     RETURN (sample_matrix(state))[1];
   END
   $$ LANGUAGE plpgsql;

   CREATE OR REPLACE FUNCTION matrix_agg(state sample, id ANYELEMENT, val DOUBLE PRECISION, size INTEGER) RETURNS sample AS $$
   BEGIN
     state.size  := size;
     state.vals  := state.vals || id::TEXT;
     state.freqs := state.freqs || val::DOUBLE PRECISION;
     state.sum   := state.sum + val;
     RETURN state;
   END
   $$ LANGUAGE plpgsql;

   CREATE OR REPLACE FUNCTION matrix_agg_single(state sample, id ANYELEMENT, val DOUBLE PRECISION) RETURNS sample AS $$
   BEGIN
     state.size  := 1;
     state.vals  := state.vals || id::TEXT;
     state.freqs := state.freqs || val::DOUBLE PRECISION;
     state.sum   := state.sum + val;
     RETURN state;
   END
   $$ LANGUAGE plpgsql;

   CREATE AGGREGATE weighted_sample(ANYELEMENT, DOUBLE PRECISION)
   (
       sfunc = matrix_agg_single,
       stype = sample,
       finalfunc = sample_matrix_single,
       initcond = '({}, {}, 0.0, 0)'
   );

   CREATE AGGREGATE weighted_sample(ANYELEMENT, DOUBLE PRECISION, INTEGER)
   (
       sfunc = matrix_agg,
       stype = sample,
       finalfunc = sample_matrix,
       initcond = '({}, {}, 0.0, 0)'
   );

CREATE EXTENSION faceting_bytea;

CREATE OR REPLACE FUNCTION sample(size INT, max INT) RETURNS SETOF INT AS $$
BEGIN
  FOR i IN 1 .. size LOOP
    RETURN NEXT floor(random() * max)::INT;
  END LOOP;
END $$ LANGUAGE plpgsql IMMUTABLE STRICT;

CREATE TEMPORARY TABLE data_ints AS SELECT DISTINCT sample(5000, 100000) as id;

CREATE TEMPORARY TABLE data_sig AS SELECT signature(id) FROM data_ints;

-- test 1: count

SELECT di.count - ds.count AS difference FROM
  (SELECT COUNT(id)        FROM data_ints) AS di,
  (SELECT COUNT(signature) FROM data_sig) AS ds;

-- test 2: members

SELECT di.count - combo.count AS difference FROM
  (SELECT members(signature) AS id FROM data_sig
   UNION 
   SELECT id FROM data_ints) AS combo,
  (SELECT id FROM data_ints) AS di;

-- test 3: sig_and

SELECT



# Register known in-database API bindings      TODO - clean this up    
API_BINDINGS = [:signature]
Dir.glob("#{Repertoire::Faceting::MODULE_PATH}/ext/*.sql")
.grep( %r{faceting_(?<name>.*)--#{Repertoire::Faceting::VERSION}\.sql} ) do
API_BINDINGS << Regexp.last_match[:name].to_sym
end



CREATE or replace FUNCTION sig_rpad1( sig BYTEA, bytes INT ) RETURNS BYTEA AS $PROC$
  /* the spirit line: use sql to right pad a bytea in SQL, then send it back to js */
  /*                  it seems there's no other way to call byteacat from plv8 */
  var result = plv8.execute("SELECT byteacat($1, ($$\\x$$ || repeat($$00$$, $2))::BYTEA) AS val", [ sig, bytes ])[0].val;
  return result;
$PROC$ LANGUAGE plv8 STRICT IMMUTABLE;


